snippet py "Description"
python << EOF
${1:python code}
EOF
endsnippet

global !p
def example(mode, str):
    if mode is 's':
        return mode + str
endglobal

snippet map "map" !b
${1:i}map ${2:<leader>${3:key}} ${4:command or other}
endsnippet

snippet mapno "noremap" !b
${1:i}noremap ${2:<leader>${3:key}} ${4:command or other}
endsnippet

snippet func "fun" !b
"{{{
func! ${1:Fun_name}(${2:param}) 
${3:}
endfunc 
"}}}
endsnippet

snippet nr2char 	 "通过 ASCII 码值取得一个字符" !
nr2char($1)$0
endsnippet
snippet char2nr 	 "取得字符的 ASCII 码值" !
char2nr($1)$0
endsnippet
snippet str2nr 	 "把字符串转换为数值" !
str2nr($1)$0
endsnippet
snippet str2float 	 "把字符串转换为浮点数" !
str2float($1)$0
endsnippet
snippet printf 	 "根据 % 项目格式化字符串" !
printf($1)$0
endsnippet
snippet escape 	 "将字符串通过 '\' 转义" !
escape($1)$0
endsnippet
snippet shellescape 	 "转义字符串用于外壳命令" !
shellescape($1)$0
endsnippet
snippet fnameescape 	 "转义 Vim 命令使用的文件名" !
fnameescape($1)$0
endsnippet
snippet tr 	 "把一组字符翻译成另一组" !
tr($1)$0
endsnippet
snippet strtrans 	 "将一个字符串变成可显示的格式" !
strtrans($1)$0
endsnippet
snippet tolower 	 "将一个字符串转换为小写" !
tolower($1)$0
endsnippet
snippet toupper 	 "将一个字符串转换为大写" !
toupper($1)$0
endsnippet
snippet match 	 "字符串中的模式匹配处" !
match($1)$0
endsnippet
snippet matchend 	 "字符串中的模式匹配结束处" !
matchend($1)$0
endsnippet
snippet matchstr 	 "在一个字符串中匹配一个模式" !
matchstr($1)$0
endsnippet
snippet matchlist 	 "类似 matchstr()，同时返回子匹配" !
matchlist($1)$0
endsnippet
snippet stridx 	 "子串在母串中第一次出现的地方" !
stridx($1)$0
endsnippet
snippet strridx 	 "子串在母串中最后一次出现的地方" !
strridx($1)$0
endsnippet
snippet strlen 	 "字符串长度" !
strlen($1)$0
endsnippet
snippet substitute 	 "用一个字符串替换一个匹配的模式" !
substitute($1)$0
endsnippet
snippet submatch 	 "取得 :substitute 匹配中指定的某个匹配" !
submatch($1)$0
endsnippet
snippet strpart 	 "取得字符串的一部分" !
strpart($1)$0
endsnippet
snippet expand 	 "展开特殊的关键字" !
expand($1)$0
endsnippet
snippet iconv 	 "转换文本编码格式" !
iconv($1)$0
endsnippet
snippet byteidx 	 "字符串里字符的字节位置" !
byteidx($1)$0
endsnippet
snippet repeat 	 "重复字符串多次" !
repeat($1)$0
endsnippet
snippet eval 	 "计算字符串表达式" !
eval($1)$0
endsnippet

#列表处理:						*list-functions*
snippet get 	 "得到项目，错误索引不报错" !
get($1)$0
endsnippet
snippet len 	 "列表的项目总数" !
len($1)$0
endsnippet
snippet empty 	 "检查列表是否为空" !
empty($1)$0
endsnippet
snippet insert 	 "在列表某处插入项目" !
insert($1)$0
endsnippet
snippet add 	 "在列表后附加项目" !
add($1)$0
endsnippet
snippet extend 	 "在列表后附加另一个列表" !
extend($1)$0
endsnippet
snippet remove 	 "删除列表里一或多个项目" !
remove($1)$0
endsnippet
snippet copy 	 "建立列表的浅备份" !
copy($1)$0
endsnippet
snippet deepcopy 	 "建立列表的完整备份" !
deepcopy($1)$0
endsnippet
snippet filter 	 "删除列表的选定项目" !
filter($1)$0
endsnippet
snippet map() 	 "改变每个列表项目"
map($1)$0
endsnippet
snippet sort 	 "给列表排序" !
sort($1)$0
endsnippet
snippet reverse 	 "反转列表项目的顺序" !
reverse($1)$0
endsnippet
snippet split 	 "分割字符串成为列表" !
split($1)$0
endsnippet
snippet join 	 "合并列表项目成为字符串" !
join($1)$0
endsnippet
snippet range 	 "返回数值序列的列表" !
range($1)$0
endsnippet
snippet string 	 "列表的字符串表示形式" !
string($1)$0
endsnippet
snippet call 	 "调用函数，参数以列表形式提供" !
call($1)$0
endsnippet
snippet index 	 "列表里某值的索引" !
index($1)$0
endsnippet
snippet max 	 "列表项目的最大值" !
max($1)$0
endsnippet
snippet min 	 "列表项目的最小值" !
min($1)$0
endsnippet
snippet count 	 "计算列表里某值的出现次数" !
count($1)$0
endsnippet
snippet repeat 	 "重复列表多次" !
repeat($1)$0
endsnippet

#字典处理:						*dict-functions*
snippet get 	 "得到项目，错误的键不报错" !
get($1)$0
endsnippet
snippet len 	 "字典项目的总数" !
len($1)$0
endsnippet
snippet has_key 	 "检查某键是否出现在字典里" !
has_key($1)$0
endsnippet
snippet empty 	 "检查字典是否为空" !
empty($1)$0
endsnippet
snippet remove 	 "删除字典的项目" !
remove($1)$0
endsnippet
snippet extend 	 "从一个字典增加项目到另一个字典" !
extend($1)$0
endsnippet
snippet filter 	 "删除字典的选定项目" !
filter($1)$0
endsnippet
snippet map() 	 "改变每个字典项目" !
map($1)$0
endsnippet
snippet keys 	 "得到字典的键列表" !
keys($1)$0
endsnippet
snippet values 	 "得到字典的值列表" !
values($1)$0
endsnippet
snippet items 	 "得到字典的键-值组对的列表" !
items($1)$0
endsnippet
snippet copy 	 "建立字典的浅备份" !
copy($1)$0
endsnippet
snippet deepcopy 	 "建立字典的完整备份" !
deepcopy($1)$0
endsnippet
snippet string 	 "字典的字符串表示形式" !
string($1)$0
endsnippet
snippet max 	 "字典项目的最大值" !
max($1)$0
endsnippet
snippet min 	 "字典项目的最小值" !
min($1)$0
endsnippet
snippet count 	 "计算字典里某值的出现次数" !
count($1)$0
endsnippet

#浮点数计算:						*float-functions*
snippet float2nr 	 "把浮点数转换为数值" !
float2nr($1)$0
endsnippet
snippet abs 	 "绝对值 (也适用于数值)" !
abs($1)$0
endsnippet
snippet round 	 "四舍五入" !
round($1)$0
endsnippet
snippet ceil 	 "向上取整" !
ceil($1)$0
endsnippet
snippet floor 	 "乡下取整" !
floor($1)$0
endsnippet
snippet trunc 	 "删除小数点后的值" !
trunc($1)$0
endsnippet
snippet log10 	 "以 10 为底的对数" !
log10($1)$0
endsnippet
snippet pow 	 "x 的 y 次方" !
pow($1)$0
endsnippet
snippet sqrt 	 "平方根" !
sqrt($1)$0
endsnippet
snippet sin 	 "正弦" !
sin($1)$0
endsnippet
snippet cos 	 "余弦" !
cos($1)$0
endsnippet
snippet atan 	 "反正切" !
atan($1)$0
endsnippet

#变量:						 	*var-functions*
snippet type 	 "变量的类型" !
type($1)$0
endsnippet
snippet islocked 	 "检查变量是否加锁" !
islocked($1)$0
endsnippet
snippet function 	 "得到函数名对应的函数引用" !
function($1)$0
endsnippet
snippet getbufvar 	 "取得指定缓冲区中的变量值" !
getbufvar($1)$0
endsnippet
snippet setbufvar 	 "设定指定缓冲区中的变量值" !
setbufvar($1)$0
endsnippet
snippet getwinvar 	 "取得指定窗口的变量值" !
getwinvar($1)$0
endsnippet
snippet gettabvar 	 "取得指定标签页的变量值" !
gettabvar($1)$0
endsnippet
snippet gettabwinvar 	 "取得指定窗口和标签页的变量值" !
gettabwinvar($1)$0
endsnippet
snippet setwinvar 	 "设定指定窗口的变量值" !
setwinvar($1)$0
endsnippet
snippet settabvar 	 "设定指定标签页的变量值" !
settabvar($1)$0
endsnippet
snippet settabwinvar 	 "设定指定窗口和标签页的变量值" !
settabwinvar($1)$0
endsnippet
snippet garbagecollect 	 "可能情况下释放内存" !
garbagecollect($1)$0
endsnippet

#光标和位置标记位置:			*cursor-functions* *mark-functions*
snippet col 	 "光标或位置标记所在的列" !
col($1)$0
endsnippet
snippet virtcol 	 "光标或位置标记所在的屏幕列" !
virtcol($1)$0
endsnippet
snippet line 	 "光标或位置标记所在行" !
line($1)$0
endsnippet
snippet wincol 	 "光标所在窗口列" !
wincol($1)$0
endsnippet
snippet winline 	 "光标所在窗口行" !
winline($1)$0
endsnippet
snippet cursor 	 "置光标于 行／列 处" !
cursor($1)$0
endsnippet
snippet getpos 	 "得到光标、位置标记等的位置" !
getpos($1)$0
endsnippet
snippet setpos 	 "设置光标、位置标记等的位置" !
setpos($1)$0
endsnippet
snippet byte2line 	 "取得某字节位置所在行号" !
byte2line($1)$0
endsnippet
snippet line2byte 	 "取得某行之前的字节数" !
line2byte($1)$0
endsnippet
snippet diff_filler 	 "得到一行之上的填充行数目" !
diff_filler($1)$0
endsnippet

#操作当前缓冲区的文本:					*text-functions*
snippet getline 	 "从缓冲区中取一行" !
getline($1)$0
endsnippet
snippet setline 	 "替换缓冲区中的一行" !
setline($1)$0
endsnippet
snippet append 	 "附加行或行的列表到缓冲区" !
append($1)$0
endsnippet
snippet indent 	 "某行的缩进" !
indent($1)$0
endsnippet
snippet cindent 	 "根据 C 缩进法则的某行的缩进" !
cindent($1)$0
endsnippet
snippet lispindent 	 "根据 Lisp 缩进法则的某行的缩进" !
lispindent($1)$0
endsnippet
snippet nextnonblank 	 "查找下一个非空白行" !
nextnonblank($1)$0
endsnippet
snippet prevnonblank 	 "查找前一个非空白行" !
prevnonblank($1)$0
endsnippet
snippet search 	 "查找模式的匹配" !
search($1)$0
endsnippet
snippet searchpos 	 "寻找模式的匹配" !
searchpos($1)$0
endsnippet
snippet searchpair 	 "查找 start/skip/end 配对的另一端" !
searchpair($1)$0
endsnippet
snippet searchpairpos 	 "查找 start/skip/end 配对的另一端" !
searchpairpos($1)$0
endsnippet
snippet searchdecl 	 "查找名字的声明" !
searchdecl($1)$0
endsnippet

#					*system-functions* *file-functions*
#系统调用及文件操作:
snippet glob 	 "展开通配符" !
glob($1)$0
endsnippet
snippet globpath 	 "在几个路径中展开通配符" !
globpath($1)$0
endsnippet
snippet findfile 	 "在目录列表里查找文件" !
findfile($1)$0
endsnippet
snippet finddir 	 "在目录列表里查找目录" !
finddir($1)$0
endsnippet
snippet resolve 	 "找到一个快捷方式所指" !
resolve($1)$0
endsnippet
snippet fnamemodify 	 "改变文件名" !
fnamemodify($1)$0
endsnippet
snippet pathshorten 	 "缩短路径里的目录名" !
pathshorten($1)$0
endsnippet
snippet simplify 	 "简化路径，不改变其含义" !
simplify($1)$0
endsnippet
snippet executable 	 "检查一个可执行程序是否存在" !
executable($1)$0
endsnippet
snippet filereadable 	 "检查一个文件可读与否" !
filereadable($1)$0
endsnippet
snippet filewritable 	 "检查一个文件可写与否" !
filewritable($1)$0
endsnippet
snippet getfperm 	 "得到文件权限" !
getfperm($1)$0
endsnippet
snippet getftype 	 "得到文件类型" !
getftype($1)$0
endsnippet
snippet isdirectory 	 "检查一个目录是否存在" !
isdirectory($1)$0
endsnippet
snippet getfsize 	 "取得文件大小" !
getfsize($1)$0
endsnippet
snippet getcwd 	 "取得当前工作路径" !
getcwd($1)$0
endsnippet
snippet haslocaldir 	 "检查当前窗口是否使用过 |:lcd|" !
haslocaldir($1)$0
endsnippet
snippet tempname 	 "取得一个临时文件的名称" !
tempname($1)$0
endsnippet
snippet mkdir 	 "建立新目录" !
mkdir($1)$0
endsnippet
snippet delete 	 "删除文件" !
delete($1)$0
endsnippet
snippet rename 	 "重命名文件" !
rename($1)$0
endsnippet
snippet system 	 "取得一个 shell 命令的结果" !
system($1)$0
endsnippet
snippet hostname 	 "系统的名称" !
hostname($1)$0
endsnippet
snippet readfile 	 "读入文件到一个行列表" !
readfile($1)$0
endsnippet
snippet writefile 	 "把一个行列表写到文件里" !
writefile($1)$0
endsnippet

#日期和时间:				*date-functions* *time-functions*
snippet getftime 	 "得到文件的最近修改时间" !
getftime($1)$0
endsnippet
snippet localtime 	 "得到以秒计的当前时间" !
localtime($1)$0
endsnippet
snippet strftime 	 "把时间转换为字符串" !
strftime($1)$0
endsnippet
snippet reltime 	 "得到准确的当前或者已经经过的时间" !
reltime($1)$0
endsnippet
snippet reltimestr 	 "把 reltime() 的结果转换为字符串" !
reltimestr($1)$0
endsnippet

#			*buffer-functions* *window-functions* *arg-functions*
#缓冲区，窗口及参数列表:
snippet argc 	 "参数列表项数" !
argc($1)$0
endsnippet
snippet argidx 	 "参数列表中的当前位置" !
argidx($1)$0
endsnippet
snippet argv 	 "从参数列表中取得一项" !
argv($1)$0
endsnippet
snippet bufexists 	 "检查缓冲区是否存在" !
bufexists($1)$0
endsnippet
snippet buflisted 	 "检查缓冲区是否存在并在列表内" !
buflisted($1)$0
endsnippet
snippet bufloaded 	 "检查缓冲区是否存在并已加载" !
bufloaded($1)$0
endsnippet
snippet bufname 	 "取得某缓冲区名" !
bufname($1)$0
endsnippet
snippet bufnr 	 "取得某缓冲区号" !
bufnr($1)$0
endsnippet
snippet tabpagebuflist 	 "得到标签页里的缓冲区列表" !
tabpagebuflist($1)$0
endsnippet
snippet tabpagenr 	 "得到标签页号" !
tabpagenr($1)$0
endsnippet
snippet tabpagewinnr 	 "类似于特定标签页里的 winnr()" !
tabpagewinnr($1)$0
endsnippet
snippet winnr 	 "取得当前窗口的窗口号" !
winnr($1)$0
endsnippet
snippet bufwinnr 	 "取得某缓冲区的窗口号" !
bufwinnr($1)$0
endsnippet
snippet winbufnr 	 "取得某窗口的缓冲区号" !
winbufnr($1)$0
endsnippet
snippet getbufline 	 "得到指定缓冲区的行列表" !
getbufline($1)$0
endsnippet

#命令行:						*command-line-functions*
snippet getcmdline 	 "得到当前命令行" !
getcmdline($1)$0
endsnippet
snippet getcmdpos 	 "得到命令行里的光标位置" !
getcmdpos($1)$0
endsnippet
snippet setcmdpos 	 "设置命令行里的光标位置" !
setcmdpos($1)$0
endsnippet
snippet getcmdtype 	 "得到当前命令行的类型" !
getcmdtype($1)$0
endsnippet

#quickfix 和位置列表:				*quickfix-functions*
snippet getqflist 	 "quickfix 错误的列表" !
getqflist($1)$0
endsnippet
snippet setqflist 	 "修改 quickfix 列表" !
setqflist($1)$0
endsnippet
snippet getloclist 	 "位置列表项目的列表" !
getloclist($1)$0
endsnippet
snippet setloclist 	 "修改位置列表" !
setloclist($1)$0
endsnippet

#插入模式补全:					*completion-functions*
snippet complete 	 "设定要寻找的匹配" !
complete($1)$0
endsnippet
snippet complete_add 	 "加入要寻找的匹配" !
complete_add($1)$0
endsnippet
snippet complete_check 	 "检查补全是否被中止" !
complete_check($1)$0
endsnippet
snippet pumvisible 	 "检查弹出菜单是否显示" !
pumvisible($1)$0
endsnippet

#折叠:						*folding-functions*
snippet foldclosed 	 "检查某一行是否被折叠起来" !
foldclosed($1)$0
endsnippet
snippet foldclosedend 	 "类似 foldclosed() 但同时返回最后一行" !
foldclosedend($1)$0
endsnippet
snippet foldlevel 	 "检查某行的折叠级别" !
foldlevel($1)$0
endsnippet
snippet foldtext 	 "产生折叠关闭时所显示的行" !
foldtext($1)$0
endsnippet
snippet foldtextresult 	 "得到关闭折叠显示的文本" !
foldtextresult($1)$0
endsnippet

#语法和高亮:	 		 *syntax-functions* *highlighting-functions*
snippet clearmatches 	 "清除 |matchadd()| 和 |:match| 诸命令定义的所有" !
clearmatches($1)$0
endsnippet
				匹配
snippet getmatches 	 "得到 |matchadd()| 和 |:match| 诸命令定义的所有" !
getmatches($1)$0
endsnippet
				匹配
snippet hlexists 	 "检查高亮组是否存在" !
hlexists($1)$0
endsnippet
snippet hlID 	 "取得高亮组标示" !
hlID($1)$0
endsnippet
snippet synID 	 "取得某位置的语法标示" !
synID($1)$0
endsnippet
snippet synIDattr 	 "取得某语法标示的特定属性" !
synIDattr($1)$0
endsnippet
snippet synIDtrans 	 "取得翻译后的语法标示" !
synIDtrans($1)$0
endsnippet
snippet diff_hlID 	 "得到 diff 模式某个位置的高亮标示" !
diff_hlID($1)$0
endsnippet
snippet matchadd 	 "定义要高亮的模式 (一个 匹配)" !
matchadd($1)$0
endsnippet
snippet matcharg 	 "得到 |:match| 参数的相关信息" !
matcharg($1)$0
endsnippet
snippet matchdelete 	 "删除 |matchadd()| 或 |:match| 诸命令定义的匹配" !
matchdelete($1)$0
endsnippet
snippet setmatches 	 "恢复 |getmatches()| 保存的匹配列表" !
setmatches($1)$0
endsnippet

#拼写:	 					*spell-functions*
snippet spellbadword 	 "定位光标所在或之后的错误拼写的单词" !
spellbadword($1)$0
endsnippet
snippet spellsuggest 	 "返回建议的拼写校正列表" !
spellsuggest($1)$0
endsnippet
snippet soundfold 	 "返回 发音相似 的单词等价形式" !
soundfold($1)$0
endsnippet

#历史记录:					*history-functions*
snippet histadd 	 "在历史记录中加入一项" !
histadd($1)$0
endsnippet
snippet histdel 	 "从历史记录中删除一项" !
histdel($1)$0
endsnippet
snippet histget 	 "从历史记录中提取一项" !
histget($1)$0
endsnippet
snippet histnr 	 "取得某历史记录的最大索引号" !
histnr($1)$0
endsnippet

#交互:						*interactive-functions*
snippet browse 	 "显示文件查找器" !
browse($1)$0
endsnippet
snippet browsedir 	 "显示目录查找器" !
browsedir($1)$0
endsnippet
snippet confirm 	 "让用户作出选择" !
confirm($1)$0
endsnippet
snippet getchar 	 "从用户那里取得一个字符输入" !
getchar($1)$0
endsnippet
snippet getcharmod 	 "取得最近键入字符的修饰符" !
getcharmod($1)$0
endsnippet
snippet feedkeys 	 "把字符放到预输入队列中" !
feedkeys($1)$0
endsnippet
snippet input 	 "从用户那里取得一行输入" !
input($1)$0
endsnippet
snippet inputlist 	 "让用户从列表里选择一个项目" !
inputlist($1)$0
endsnippet
snippet inputsecret 	 "从用户那里取得一行输入，不回显" !
inputsecret($1)$0
endsnippet
snippet inputdialog 	 "从用户那里取得一行输入，使用对话框" !
inputdialog($1)$0
endsnippet
snippet inputsave 	 "保存和清除预输入 (typeahead)" !
inputsave($1)$0
endsnippet
snippet inputrestore 	 "恢复预输入 (译注：参阅 input())" !
inputrestore($1)$0
endsnippet

#GUI:						*gui-functions*
snippet getfontname 	 "得到当前使用的字体名" !
getfontname($1)$0
endsnippet
snippet getwinposx 	 "GUI Vim 窗口的 X 位置" !
getwinposx($1)$0
endsnippet
snippet getwinposy 	 "GUI Vim 窗口的 Y 位置" !
getwinposy($1)$0
endsnippet

#Vim 服务器:					*server-functions*
snippet serverlist 	 "返回服务器列表" !
serverlist($1)$0
endsnippet
snippet remote_send 	 "向 Vim 服务器发送字符命令" !
remote_send($1)$0
endsnippet
snippet remote_expr 	 "在 Vim 服务器内对一个表达式求值" !
remote_expr($1)$0
endsnippet
snippet server2client 	 "向一个服务器客户发送应答" !
server2client($1)$0
endsnippet
snippet remote_peek 	 "检查一个服务器是否已经应答" !
remote_peek($1)$0
endsnippet
snippet remote_read 	 "从一个服务器读取应答" !
remote_read($1)$0
endsnippet
snippet foreground 	 "将一个 Vim 窗口移至前台" !
foreground($1)$0
endsnippet
snippet remote_foreground 	 "将一个 Vim 服务器窗口移至前台" !
remote_foreground($1)$0
endsnippet

#窗口大小和位置:					*window-size-functions*
snippet winheight 	 "取得某窗口的高度" !
winheight($1)$0
endsnippet
snippet winwidth 	 "取得某窗口的宽度" !
winwidth($1)$0
endsnippet
snippet winrestcmd 	 "恢复窗口大小的返回命令" !
winrestcmd($1)$0
endsnippet
snippet winsaveview 	 "得到当前窗口的视图" !
winsaveview($1)$0
endsnippet
snippet winrestview 	 "恢复保存的当前窗口的视图" !
winrestview($1)$0
endsnippet

#杂项:						*various-functions*
snippet mode 	 "取得当前编辑状态" !
mode($1)$0
endsnippet
snippet visualmode 	 "最近一次使用过的可视模式" !
visualmode($1)$0
endsnippet
snippet hasmapto 	 "检查映射是否存在" !
hasmapto($1)$0
endsnippet
snippet mapcheck 	 "检查匹配的映射是否存在" !
mapcheck($1)$0
endsnippet
snippet maparg 	 "取得映射的右部 (rhs)" !
maparg($1)$0
endsnippet
snippet exists 	 "检查变量，函数等是否存在" !
exists($1)$0
endsnippet
snippet has 	 "检查 Vim 是否支持某特性" !
has($1)$0
endsnippet
snippet changenr 	 "返回最近的改变号" !
changenr($1)$0
endsnippet
snippet cscope_connection 	 "检查有无与 cscope 的连接" !
cscope_connection($1)$0
endsnippet
snippet did_filetype 	 "检查某文件类型自动命令是否已经使用" !
did_filetype($1)$0
endsnippet
snippet eventhandler 	 "检查是否在一个事件处理程序内" !
eventhandler($1)$0
endsnippet
snippet getpid 	 "得到 Vim 的进程号" !
getpid($1)$0
endsnippet

snippet libcall 	 "调用一个外部库函数" !
libcall($1)$0
endsnippet
snippet libcallnr 	 "同上，但返回一个数值" !
libcallnr($1)$0
endsnippet

snippet getreg 	 "取得寄存器内容" !
getreg($1)$0
endsnippet
snippet getregtype 	 "取得寄存器类型" !
getregtype($1)$0
endsnippet
snippet setreg 	 "设定寄存器内容及类型" !
setreg($1)$0
endsnippet

snippet taglist 	 "得到匹配标签的列表" !
taglist($1)$0
endsnippet
snippet tagfiles 	 "得到标签文件的列表" !
tagfiles($1)$0
endsnippet

snippet mzeval 	 "计算 |MzScheme| 表达式" !
mzeval($1)$0
endsnippet

